{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useRef, useState } from 'react';\nimport { getCompanyByURLEffect, createCustomerEffect, getCustomersByBranchEffect } from '../effects/customers';\n\nconst useCustomers = () => {\n  _s();\n\n  const loading = useRef(false);\n  const [company, setCompany] = useState([]);\n  const [customer, setCustomer] = useState();\n  const [representatives, setRepresentatives] = useState([]);\n  const getCompanyByURL = useCallback(async storedLink => {\n    try {\n      loading.current = true;\n      const response = await getCompanyByURLEffect(storedLink);\n      setCompany(response.companie);\n      loading.current = false;\n    } catch (e) {\n      console.error(`Error loading students`, e);\n    }\n  }, [loading]);\n  const createCustomer = useCallback(async customer => {\n    try {\n      loading.current = true;\n      const response = await createCustomerEffect(customer);\n      setCustomer(response.customer);\n      loading.current = false;\n    } catch (e) {\n      console.error(`Error loading customer`, e);\n    }\n  }, [loading]);\n  const getRepresentativesByBranch = useCallback(async customer => {\n    try {\n      loading.current = true;\n      const response = await getCustomersByBranchEffect(customer);\n      let availableUsers = response.filter(item => item.isActive);\n      setRepresentatives(availableUsers);\n      return availableUsers;\n      loading.current = false;\n    } catch (e) {\n      console.error(`Error loading customers`, e);\n    }\n  }, [loading]);\n\n  const getRepresentatives = () => {\n    return representatives;\n  };\n\n  return {\n    company,\n    getCompanyByURL,\n    createCustomer,\n    customer,\n    getRepresentativesByBranch,\n    representatives,\n    getRepresentatives\n  };\n};\n\n_s(useCustomers, \"Fv3398v91mwbQJslnfg3a8aO++E=\");\n\nexport default useCustomers;","map":{"version":3,"sources":["/Users/andresgonzalez/Desktop/B2B-main-website/src/hooks/useCustomers.js"],"names":["useCallback","useRef","useState","getCompanyByURLEffect","createCustomerEffect","getCustomersByBranchEffect","useCustomers","loading","company","setCompany","customer","setCustomer","representatives","setRepresentatives","getCompanyByURL","storedLink","current","response","companie","e","console","error","createCustomer","getRepresentativesByBranch","availableUsers","filter","item","isActive","getRepresentatives"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,EAAsDC,0BAAtD,QAAwF,sBAAxF;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAMC,OAAO,GAAGN,MAAM,CAAC,KAAD,CAAtB;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAMY,eAAe,GAAGd,WAAW,CAC/B,MAAOe,UAAP,IAAsB;AAClB,QAAI;AACAR,MAAAA,OAAO,CAACS,OAAR,GAAkB,IAAlB;AACA,YAAMC,QAAQ,GAAG,MAAMd,qBAAqB,CAACY,UAAD,CAA5C;AACAN,MAAAA,UAAU,CAACQ,QAAQ,CAACC,QAAV,CAAV;AACAX,MAAAA,OAAO,CAACS,OAAR,GAAkB,KAAlB;AACH,KALD,CAKE,OAAOG,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAe,wBAAf,EAAwCF,CAAxC;AACH;AACJ,GAV8B,EAW/B,CAACZ,OAAD,CAX+B,CAAnC;AAcA,QAAMe,cAAc,GAAGtB,WAAW,CAC9B,MAAOU,QAAP,IAAoB;AAChB,QAAI;AACAH,MAAAA,OAAO,CAACS,OAAR,GAAkB,IAAlB;AACA,YAAMC,QAAQ,GAAG,MAAMb,oBAAoB,CAACM,QAAD,CAA3C;AACAC,MAAAA,WAAW,CAACM,QAAQ,CAACP,QAAV,CAAX;AACAH,MAAAA,OAAO,CAACS,OAAR,GAAkB,KAAlB;AACH,KALD,CAKE,OAAOG,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAe,wBAAf,EAAwCF,CAAxC;AACH;AACJ,GAV6B,EAW9B,CAACZ,OAAD,CAX8B,CAAlC;AAcA,QAAMgB,0BAA0B,GAAGvB,WAAW,CAC1C,MAAOU,QAAP,IAAoB;AAChB,QAAI;AACAH,MAAAA,OAAO,CAACS,OAAR,GAAkB,IAAlB;AACA,YAAMC,QAAQ,GAAG,MAAMZ,0BAA0B,CAACK,QAAD,CAAjD;AACA,UAAIc,cAAc,GAAGP,QAAQ,CAACQ,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,QAA7B,CAArB;AACAd,MAAAA,kBAAkB,CAACW,cAAD,CAAlB;AACA,aAAOA,cAAP;AACAjB,MAAAA,OAAO,CAACS,OAAR,GAAkB,KAAlB;AACH,KAPD,CAOE,OAAOG,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAe,yBAAf,EAAyCF,CAAzC;AACH;AACJ,GAZyC,EAa1C,CAACZ,OAAD,CAb0C,CAA9C;;AAgBA,QAAMqB,kBAAkB,GAAG,MAAM;AAC7B,WAAOhB,eAAP;AACH,GAFD;;AAIA,SAAO;AACHJ,IAAAA,OADG;AAEHM,IAAAA,eAFG;AAGHQ,IAAAA,cAHG;AAIHZ,IAAAA,QAJG;AAKHa,IAAAA,0BALG;AAMHX,IAAAA,eANG;AAOHgB,IAAAA;AAPG,GAAP;AASH,CA/DD;;GAAMtB,Y;;AAiEN,eAAeA,YAAf","sourcesContent":["import { useCallback, useRef, useState } from 'react';\nimport { getCompanyByURLEffect, createCustomerEffect, getCustomersByBranchEffect } from '../effects/customers';\n\nconst useCustomers = () => {\n    const loading = useRef(false);\n    const [company, setCompany] = useState([]);\n    const [customer, setCustomer] = useState();\n    const [representatives, setRepresentatives] = useState([]);\n\n    const getCompanyByURL = useCallback(\n        async (storedLink) => {\n            try {\n                loading.current = true;\n                const response = await getCompanyByURLEffect(storedLink);\n                setCompany(response.companie);\n                loading.current = false;\n            } catch (e) {\n                console.error(`Error loading students`, e);\n            }\n        },\n        [loading]\n    );\n\n    const createCustomer = useCallback(\n        async (customer) => {\n            try {\n                loading.current = true;\n                const response = await createCustomerEffect(customer);\n                setCustomer(response.customer);\n                loading.current = false;\n            } catch (e) {\n                console.error(`Error loading customer`, e);\n            }\n        },\n        [loading]\n    );\n\n    const getRepresentativesByBranch = useCallback(\n        async (customer) => {\n            try {\n                loading.current = true;\n                const response = await getCustomersByBranchEffect(customer);\n                let availableUsers = response.filter(item => item.isActive)\n                setRepresentatives(availableUsers);\n                return availableUsers\n                loading.current = false;\n            } catch (e) {\n                console.error(`Error loading customers`, e);\n            }\n        },\n        [loading]\n    );\n\n    const getRepresentatives = () => {\n        return representatives\n    }\n\n    return {\n        company,\n        getCompanyByURL,\n        createCustomer,\n        customer,\n        getRepresentativesByBranch,\n        representatives,\n        getRepresentatives\n    };\n};\n\nexport default useCustomers;\n"]},"metadata":{},"sourceType":"module"}